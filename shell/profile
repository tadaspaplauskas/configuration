if [ -d "$HOME/platform-tools" ] ; then
     export PATH="$HOME/platform-tools:$PATH"
 fi

# scripts
# jump to any often visited directory
source ~/Config/shell/z/z.sh

# config
export PATH="/usr/local/sbin:$PATH"
export EDITOR=vim
export CDPATH="~"
export LC_ALL=en_US.UTF-8
export DOCKER_HOST="unix://$HOME/.colima/docker.sock"

# prompt
PROMPT="%B%F{blue}%1~%f%b %# "

# misc
alias ls='ls -halp'
alias ..='cd ..'
alias rm='echo "rm is disabled, use trash"' # protection from fat fingers
alias cp='cp -iv' # interactive (prompt before overwrite) and verbose
alias mv='mv -iv' # interactive (prompt before overwrite) and verbose
alias mkdir='mkdir -pv'
alias download='curl -O'
# make watch show color and recognize aliases
alias watch='watch --color --interval 2'

# alert once command is completed
alert () {
    "$@"; tput bel
}

# php, laravel
alias phpunit='php vendor/bin/phpunit'
alias redis-flush='redis-cli flushall'
alias art='php artisan'
alias laralogs='tail -n 200 -f storage/logs/laravel.log'
alias do='./do.sh'
alias serve='open http://localhost:8000 && php artisan serve'

# find files which contain a phrase in current directory (recursive)
contains() {
    grep -r "$*" .;
}

# find files with a phrase in the name
somethinglike() {
    find . -type f -name "*$**"
}

edit () {
    \ls | grep "$*" | xargs -o vim
}

# git
# Load version control information
autoload -Uz vcs_info
precmd() { vcs_info }

# Format the vcs_info_msg_0_ variable
zstyle ':vcs_info:git:*' formats '%b'

# Set up the prompt (with git branch name)
setopt PROMPT_SUBST
RPROMPT=\$vcs_info_msg_0_

# Git helpers
alias s='git status'
alias d='git add . && git diff --ignore-all-space --find-renames HEAD'
alias l='git log --oneline'
alias today='git log --since=00:00:00 --all --no-merges --oneline --author=tadas@paplauskas.lt'
alias graph='git log --all --decorate --oneline --graph';
alias last='git diff HEAD~ HEAD'
alias b='git branch'

newbranch () {
    git checkout -b "$*"
    git push --set-upstream origin "$*"
}

c () {
    # fix formatting errors if phpcs is setup for the project
    [ -f vendor/bin/phpcbf ] && vendor/bin/phpcbf app;

    commitMessage="$*"

    if [ "$commitMessage" = "" ]; then
        commitMessage="wip"
        return
    fi

    git add .
    eval "git commit -a -m '${commitMessage}'"
}

p () {
    git push
}

# Github helpers
ghpr() {
    branch=`git branch --show-current`
    open "https://github.com/mailerlite/mailerlite/pull/new/$branch"
}

ghc() {
    open "https://github.com/mailerlite/mailerlite/commits/$*"
}
